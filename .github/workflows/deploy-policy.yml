# This is a basic workflow to help you get started with Actions

name: deploy-policy

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      - name: Deploy policies
        run: |
          admin_token="eyJhbGciOiJSUzI1NiIsImtpZCI6Imp3dGswIiwidHlwIjoiSldUIn0.eyJhdWQiOlsiaHR0cHM6Ly9zdGFja3JveC5pby9qd3Qtc291cmNlcyNhcGktdG9rZW5zIl0sImV4cCI6MTY3MjA3NzcxNywiaWF0IjoxNjQwNTQxNzE3LCJpc3MiOiJodHRwczovL3N0YWNrcm94LmlvL2p3dCIsImp0aSI6ImQ1OWNiMDMxLWQ4YjctNDk4Yy05OTQ1LTIxYWM5NmFmNTcyYSIsIm5hbWUiOiJzdGFja3JveCIsInJvbGVzIjpbIkFkbWluIl19.oBbrU-gDXKcrs1U1NTrazEh-qFYapf7bobuVHYIQhmCkuQWbFYEN33pZiml6fanR3YSWFso_BqQzCCvoePLAjvlgtNW5sbFimstA_euJ-AS4w2brPrkXUi8oyP2hwEH7K2ekbQ6TX-U65o-ykyqCzmXBcrZ2pnhNURVp2Q048LBn75af5OTG9nQIKPJY3BVEq_MSBozqnyRflxOHjWESNtNdL0yyRva2huLf_6bmscQ7sKmSQr1Kjs_Asi_res4xBRkq9ovrxoDAnGysdxzkrDNU2Z42whJRbqV_3F5nHDSiwzhqtjVWiz54Y9WWpzA3wTnbGo1TTmFXec523dnbZWbTK_fhW1AKnYOhBedmdUmz8KbSS7qH5jwquz3sROdlBJzNN_qczOOft-MZlyYxUqznYEd883Kx0_13a3VZOovi3dYkR4324RpXWwusAQ6HCWu0U6QjNAeQvrsclZeLCR9BiVgfb2JFJdrFhh8D0w5zNzAbTYqlEOLmbF2TyFIF1tNGhzxq6XxR-zSntXorrJLag-7yFkfsnnitkIow6akHG7V3_SDFlMWvItRW3EN9ksYu6a0qB_CPzCwPT9-0EM2YHvta7lD3nZSKtk3WcpS_0SIdN-AVIw3VISZVR12Kd9tJqlDjhXdFZpsnF6UDP6i9cBsaScBbcDJIWJW7Hzg"

          stackrox_ep="central-stackrox.apps.cluster-dwl98.dwl98.sandbox1661.opentlc.com"

          declare -a "POLICIES=($(curl -k --silent --no-buffer -H "Authorization: Bearer ${admin_token}" -X GET https://{$stackrox_ep}/v1/policies | jq '.policies | .[].name | @sh'))"
          
          GITHUB_POLICIES=$(ls -l policies/ | grep -v total | awk {'print $9'})
          
          for github_policy in $GITHUB_POLICIES;do
                  github_policy_name=$(cat policies/$github_policy | jq '.name' | sed "s/\"/\'/g")
                  if [[ " ${POLICIES[@]} " =~ " $github_policy_name " ]]; then
                          echo ""
                          formatted_policy_name=$(echo $github_policy_name | sed "s/'//g")
                          github_policy_id=$(curl -k --silent --no-buffer -H "Authorization: Bearer ${admin_token}" https://${stackrox_ep}/v1/policies | jq -r -c --unbuffered '.policies[] | select(.name=="'"$formatted_policy_name"'") | .id')
                          echo "Verifying existing policy ${github_policy_name}"
                          curl -k --silent --no-buffer -H "Authorization: Bearer ${admin_token}" -X PUT https://${stackrox_ep}/v1/policies/${github_policy_id} -d "$(cat policies/$github_policy)"
                  else
                          echo ""
                          echo "Applying new policy ${github_policy_name}"
                          curl -k --silent --no-buffer -H "Authorization: Bearer ${admin_token}" -X POST https://${stackrox_ep}/v1/policies -d "$(cat policies/$github_policy)"
                  fi
          done
